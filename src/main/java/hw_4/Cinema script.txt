-- Создано в MySQL Workbench


-- Задача про кинотеатр:
-- У фильма, который идет в кинотеатре, есть название, длительность (пусть будет 60, 90 или
-- 120 минут), цена билета (в разное время и дни может быть разной), время начала сеанса
-- (один фильм может быть показан несколько раз в разное время и с разной ценой билета).
-- Есть информация о купленных билетах (номер билета, на какой сеанс)
-- Составить грамотную нормализованную схему хранения этих данных в БД.
-- Внести в нее 4–5 фильмов, расписание на один день и несколько проданных билетов

CREATE TABLE `film` (
    `id` INT(11) NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(255) NOT NULL,
    `duration` TIME,
    PRIMARY KEY (`id`)
);

CREATE TABLE `schedules` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `film_id` int(11) NOT NULL,
  `start` datetime,
  `price` int(11),
  PRIMARY KEY (`id`),
  FOREIGN KEY (`film_id`) REFERENCES `film` (`id`)
);

CREATE TABLE `ticket` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `seans_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  FOREIGN KEY (`seans_id`) REFERENCES `schedules`(`id`)
);

INSERT INTO `film` VALUES (1,'В мире чудес','01:00:00'),(2,'Летающие машины','01:30:00'),(3,'Прыгунки','02:00:00'),(4,'Про рыб','01:20:00');
INSERT INTO `schedules` VALUES (1,1,'2005-08-12 09:00:00',100),(2,1,'2005-08-13 09:00:00',200),(3,1,'2005-08-14 10:00:00',300),(4,2,'2005-08-12 12:00:00',100),(5,2,'2005-08-12 18:00:00',100),(6,2,'2005-08-12 19:00:00',100),(7,3,'2005-08-12 09:30:00',150);
INSERT INTO `ticket` VALUES (1,1),(2,1),(3,1),(4,1),(5,2),(6,2),(7,2),(8,2),(9,2),(10,2),(11,2),(12,2),(13,3),(14,3),(15,3),(16,4),(17,5),(18,6),(19,6),(20,7);

-- ошибки в расписании (фильмы накладываются друг на друга),
-- отсортированные по возрастанию времени. Выводить надо колонки «фильм 1»,
-- «время начала», «длительность», «фильм 2», «время начала», «длительность»
SELECT
    f.name, s.start, f.duration, f2.name, s2.start, f2.duration
FROM
    schedules s
        JOIN
    film f ON s.film_id = f.id
        JOIN
    schedules s2 ON s2.start > s.start
        AND s2.start < DATE_ADD(s.start,
        INTERVAL f.duration HOUR_SECOND)
        JOIN
    film f2 ON s2.film_id = f2.id
ORDER BY s.start ASC;


-- перерывы 30 минут и более между фильмами — выводить по уменьшению
-- длительности перерыва. Колонки «фильм 1», «время начала»,
-- «длительность», «время начала второго фильма», «длительность перерыва»
select
s1.id,
s1.film_id,
s1.start,
f1.duration,
timediff( min(s2.start), date_add(s1.start, interval f1.duration HOUR_SECOND) ) as break
from schedules s1
join film f1 on s1.film_id = f1.id
left join schedules s2 on s1.start < s2.start
group by s1.start
HAVING time_to_sec(break) > 60 * 30
ORDER BY break DESC;